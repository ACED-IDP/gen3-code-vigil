name: Integration Tests

on:
    push:
        paths:
            - gen3-integration-tests/**
    pull_request:

jobs:
    run_integration_tests:
        runs-on: ubuntu-latest

        defaults:
          run:
            working-directory: gen3-integration-tests

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JENKINS_USERNAME: PlanXCyborg
          JENKINS_PASSWORD: ${{ secrets.JENKINS_API_TOKEN }}
          REPO: ${{ github.event.repository.name }}
          BRANCH: ${{ github.ref_name }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Get PR number
              uses: actions/github-script@v6
              id: get_issue_number
              with:
                script: |
                  if (context.issue.number) {
                    // Return issue number if present
                    return context.issue.number;
                  } else {
                    // Otherwise return issue number from commit
                    return (
                      await github.rest.repos.listPullRequestsAssociatedWithCommit({
                        commit_sha: context.sha,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                      })
                    ).data[0].number;
                  }
                result-encoding: string

            - name: Save PR number to env
              run: |
                echo "PR_NUM=${{steps.get_issue_number.outputs.result}}" >> $GITHUB_ENV

            - name: Get PR labels
              uses: actions/github-script@v6
              id: get_pr_labels
              with:
                script: |
                  // Otherwise return issue number from commit
                  return (
                    await github.rest.
                    await github.rest.repos.listLabelsOnIssue({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: env.PR_NUM,
                    })
                  ).data[0].number;
                result-encoding: string

            # - name: Select CI environment
            #   run: |
            #     poetry run python -m utils.gen3_ci.select_ci_environment
            #     echo $NAMESPACE

            # - name: Set up Python
            #   uses: actions/setup-python@v2
            #   with:
            #     python-version: 3.9

            # - name: Install dependencies
            #   run: |
            #     python -m pip install --upgrade pip
            #     pip install poetry
            #     poetry install -vv

            # - name: Set Gen3 API keys
            #   run: |
            #     mkdir -p $HOME/.gen3
            #     # NS=$(echo "$NAMESPACE" | tr [:lower:] [:upper:] | tr '-' '_')
            #     # echo "NS=$NS" >> $GITHUB_ENV
            #     # echo ${{ secrets[format('GEN3_API_KEY_{0}_USER1', env.NS)] }} | jq '.' > ./$NAMESPACE.json
            #     echo "${{ secrets.GEN3_API_KEY_JENKINS_BRAIN_USER1 }}" | jq > ./$NAMESPACE.json

            # - name: Run tests
            #   run: poetry run pytest --html=report.html --self-contained-html -n auto -m "not wip"

            # - name: Release CI environment
            #   if: always()
            #   run: poetry run python -m utils.gen3_ci.release_ci_environment
